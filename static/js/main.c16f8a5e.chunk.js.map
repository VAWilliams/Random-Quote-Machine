{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","current","quotes","text","author","updateCurrentQuote","bind","floor","Math","random","this","setState","next","length","console","log","id","className","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+QA4FeA,G,wDAtFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,KACTC,OAAQ,CACN,CACEC,KAAM,qDACNC,OAAQ,UAEV,CACED,KAAM,+CACNC,OAAQ,OAEV,CACED,KAAM,uCACNC,OAAQ,cAEV,CACED,KAAM,qCACNC,OAAQ,cAEV,CACED,KAAM,+CACNC,OAAQ,UAEV,CACED,KAAM,yBACNC,OAAQ,kBAId,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBA/BT,E,iEAkCG,IAAD,OAEbC,EAAoBC,KAApBD,MAAOE,EAAaD,KAAbC,OAEbC,KAAKC,UAAS,SAAAX,GAAU,IAEhBE,EAAoBF,EAApBE,OAAQD,EAAYD,EAAZC,QAEVW,EAAQV,EADAK,EAAME,IAAWP,EAAOW,SAGpC,OAAID,IAASX,GACX,EAAKI,qBACEL,GAGF,CAAEC,QAASW,Q,2CAMpBE,QAAQC,IAAI,0BACZL,KAAKL,uB,+BAGG,IAAD,EACgBK,KAAKV,MAAMC,QAA5BE,EADC,EACDA,KAAMC,EADL,EACKA,OACZ,OACE,6BAASY,GAAG,YAAYC,UAAU,aAChC,6BACE,wBAAID,GAAG,QAAQb,GACf,uBAAGa,GAAG,UAAN,IAAiBZ,IAEnB,6BACE,uBAAGY,GAAG,cACJC,UAAU,kBACVC,KAAK,4BACN,uBAAGD,UAAU,mBAEd,4BACED,GAAG,YACHC,UAAU,kBACVE,QAAST,KAAKL,oBAHhB,mB,GA3EQe,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.c16f8a5e.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: null,\n      quotes: [\n        {\n          text: \"Don't get hit by a bus... you might get isekai'ed.\",\n          author: \"Kazuma\"\n        },\n        {\n          text: \"I thought he was the one, but she was wrong.\",\n          author: \"Rem\"\n        },\n        {\n          text: \"I won't let you have my best friend!\",\n          author: \"Kanna-chan\"\n        },\n        {\n          text: \"Count backwards from one thousand.\",\n          author: \"Kaneki Ken\"\n        },\n        {\n          text: \"I will send you back to the depths of Hades.\",\n          author: \"Kratos\"\n        },\n        {\n          text: \"I love you dangerously\",\n          author: \"Charlie Puth\"\n        }\n      ]\n    };\n    this.updateCurrentQuote = this.updateCurrentQuote.bind(this);\n  }\n  \n  updateCurrentQuote() {\n\n    let { floor, random }   = Math;\n    \n    this.setState(state => {\n\n      let { quotes, current } = state;\n      let index = floor(random() * quotes.length);\n      let next  = quotes[index];\n\n      if (next === current) {\n        this.updateCurrentQuote();\n        return state;\n      }\n\n      return { current: next };\n\n    });\n  }\n  \n  componentWillMount() {\n    console.log(\"Component is mounting.\")\n    this.updateCurrentQuote();\n  }\n  \n  render() {\n    let { text, author } = this.state.current;\n    return (\n      <section id=\"quote-box\" className=\"jumbotron\">\n        <div>\n          <h2 id=\"text\">{text}</h2>\n          <p id=\"author\">-{author}</p>\n        </div>\n        <div>\n          <a id=\"tweet-quote\"\n            className=\"btn btn-primary\"\n            href=\"twitter.com/intent/tweet\"\n          ><i className=\"fa fa-twitter\"></i>\n          </a>\n          <button\n            id=\"new-quote\"\n            className=\"btn btn-primary\"\n            onClick={this.updateCurrentQuote}\n          >\n            New Quote\n          </button>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}